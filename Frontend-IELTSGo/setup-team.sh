#!/bin/bash

# üöÄ IELTSGo Frontend - Automatic Setup Script
# Script t·ª± ƒë·ªông setup Frontend cho team members

set -e  # Exit on error

echo "=================================="
echo "üöÄ IELTSGo Frontend Setup"
echo "=================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚Ñπ $1${NC}"
}

# Check if running from Frontend-IELTSGo directory
if [ ! -f "package.json" ]; then
    print_error "Ph·∫£i ch·∫°y script n√†y t·ª´ folder Frontend-IELTSGo!"
    echo "  cd Frontend-IELTSGo"
    echo "  ./setup-team.sh"
    exit 1
fi

echo "B∆∞·ªõc 1: Ki·ªÉm tra prerequisites..."
echo "-----------------------------------"

# Check Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    echo "  C√†i ƒë·∫∑t t·ª´: https://nodejs.org/"
    exit 1
else
    NODE_VERSION=$(node -v)
    print_success "Node.js: $NODE_VERSION"
fi

# Check pnpm
if ! command -v pnpm &> /dev/null; then
    print_warning "pnpm ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. ƒêang c√†i..."
    npm install -g pnpm
    if [ $? -eq 0 ]; then
        print_success "pnpm ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        print_error "Kh√¥ng th·ªÉ c√†i pnpm. Vui l√≤ng c√†i th·ªß c√¥ng: npm install -g pnpm"
        exit 1
    fi
else
    PNPM_VERSION=$(pnpm -v)
    print_success "pnpm: $PNPM_VERSION"
fi

echo ""
echo "B∆∞·ªõc 2: Setup environment variables..."
echo "---------------------------------------"

# Check if .env.local exists
if [ -f ".env.local" ]; then
    print_warning ".env.local ƒë√£ t·ªìn t·∫°i"
    read -p "B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cp .env.example .env.local
        print_success "ƒê√£ ghi ƒë√® .env.local"
    else
        print_info "Gi·ªØ nguy√™n .env.local hi·ªán t·∫°i"
    fi
else
    if [ -f ".env.example" ]; then
        cp .env.example .env.local
        print_success "ƒê√£ t·∫°o .env.local t·ª´ .env.example"
    else
        print_error ".env.example kh√¥ng t·ªìn t·∫°i!"
        exit 1
    fi
fi

echo ""
echo "B∆∞·ªõc 3: C√†i ƒë·∫∑t dependencies..."
echo "--------------------------------"

print_info "ƒêang ch·∫°y pnpm install..."
if pnpm install; then
    print_success "Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
else
    print_error "L·ªói khi c√†i ƒë·∫∑t dependencies"
    exit 1
fi

echo ""
echo "B∆∞·ªõc 4: Ki·ªÉm tra backend services..."
echo "--------------------------------------"

# Check if backend is running
print_info "Ki·ªÉm tra backend API Gateway (http://localhost:8080)..."
if curl -s http://localhost:8080/health > /dev/null 2>&1; then
    print_success "Backend ƒëang ch·∫°y"
else
    print_warning "Backend ch∆∞a ch·∫°y!"
    echo "  ƒê·ªÉ start backend:"
    echo "    cd ../  # Quay v·ªÅ root project"
    echo "    make dev  # ho·∫∑c docker-compose up -d"
fi

echo ""
echo "=================================="
print_success "Setup ho√†n t·∫•t!"
echo "=================================="
echo ""
echo "üìù C√°c b∆∞·ªõc ti·∫øp theo:"
echo ""
echo "1. Ki·ªÉm tra file .env.local:"
echo "   cat .env.local"
echo ""
echo "2. Start development server:"
echo "   ${GREEN}pnpm dev${NC}"
echo ""
echo "3. M·ªü browser:"
echo "   ${BLUE}http://localhost:3000${NC}"
echo ""
echo "4. ƒê·ªçc documentation:"
echo "   - SETUP_GUIDE.md (h∆∞·ªõng d·∫´n chi ti·∫øt)"
echo "   - ARCHITECTURE.md (ki·∫øn tr√∫c project)"
echo "   - README.md (features & tech stack)"
echo ""

# Ask if user wants to start dev server now
read -p "B·∫°n c√≥ mu·ªën ch·∫°y 'pnpm dev' ngay b√¢y gi·ªù? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    print_info "ƒêang start development server..."
    echo "  Press Ctrl+C ƒë·ªÉ d·ª´ng server"
    echo ""
    pnpm dev
else
    echo ""
    print_info "Setup xong! Ch·∫°y 'pnpm dev' khi s·∫µn s√†ng."
fi
