"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_api_sse-manager_ts"],{

/***/ "(app-pages-browser)/./lib/api/sse-manager.ts":
/*!********************************!*\
  !*** ./lib/api/sse-manager.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sseManager: () => (/* binding */ sseManager)\n/* harmony export */ });\nclass SSEManager {\n    connect(onNotification, onError) {\n        console.log(\"[SSE-Manager] connect() called, current listeners:\", this.listeners.size, \"connected:\", this.isConnected, \"connecting:\", this.isConnecting);\n        // Add listeners FIRST, before starting connection\n        // Set doesn't allow duplicates, so we don't need to check\n        this.listeners.add(onNotification);\n        if (onError) {\n            this.errorListeners.add(onError);\n        }\n        console.log(\"[SSE-Manager] After adding listener, total listeners:\", this.listeners.size);\n        // Create unsubscribe function FIRST (before any async operations)\n        const unsubscribe = ()=>{\n            console.log(\"[SSE-Manager] Unsubscribing listener, current count before:\", this.listeners.size);\n            this.listeners.delete(onNotification);\n            if (onError) {\n                this.errorListeners.delete(onError);\n            }\n            console.log(\"[SSE-Manager] After unsubscribe, listeners:\", this.listeners.size);\n            // Only disconnect if no listeners left\n            // Use longer delay to avoid race conditions when component re-renders quickly\n            if (this.listeners.size === 0) {\n                console.log(\"[SSE-Manager] No listeners left, scheduling disconnect in 500ms...\");\n                // Longer delay to avoid race conditions\n                setTimeout(()=>{\n                    // Double check - maybe a new listener was added during the delay\n                    if (this.listeners.size === 0) {\n                        console.log(\"[SSE-Manager] Confirmed no listeners, disconnecting...\");\n                        this.disconnect();\n                    } else {\n                        console.log(\"[SSE-Manager] New listener added during delay, keeping connection (listeners:\", this.listeners.size, \")\");\n                    }\n                }, 500);\n            }\n        };\n        // Start connection if not already connected or connecting\n        // Only create ONE connection regardless of how many listeners\n        // Use much longer timeout to handle React Strict Mode double-invoke cycle completely\n        if (!this.isConnected && !this.isConnecting) {\n            console.log(\"[SSE-Manager] Scheduling connection start (listeners:\", this.listeners.size, \")...\");\n            // Use longer delay (1200ms) to fully handle React Strict Mode double-invoke cycle\n            // React Strict Mode: mount → unmount → mount (takes ~200-500ms, but we need more buffer)\n            setTimeout(()=>{\n                // Double-check listeners before starting\n                if (this.listeners.size > 0 && !this.isConnected && !this.isConnecting) {\n                    console.log(\"[SSE-Manager] ✅ Starting connection now (listeners:\", this.listeners.size, \")...\");\n                    this.startConnection();\n                } else {\n                    console.log(\"[SSE-Manager] ⏭️ Skipping connection start (listeners:\", this.listeners.size, \"connected:\", this.isConnected, \"connecting:\", this.isConnecting, \")\");\n                }\n            }, 1200);\n        } else {\n            console.log(\"[SSE-Manager] Connection already exists, adding listener to existing connection (connected:\", this.isConnected, \"connecting:\", this.isConnecting, \")\");\n        }\n        // Return unsubscribe function (ALWAYS return a function)\n        console.log(\"[SSE-Manager] Returning unsubscribe function, type:\", typeof unsubscribe);\n        return unsubscribe;\n    }\n    startConnection() {\n        if (this.isConnected || this.isConnecting) {\n            console.log(\"[SSE-Manager] Already connected or connecting, skipping\");\n            return;\n        }\n        // Final check - ensure we have listeners before starting\n        if (this.listeners.size === 0) {\n            console.warn(\"[SSE-Manager] ⚠️ startConnection() called but no listeners, aborting\");\n            return;\n        }\n        const token =  true ? localStorage.getItem(\"access_token\") : 0;\n        if (!token) {\n            console.error(\"[SSE-Manager] No token available\");\n            return;\n        }\n        console.log(\"[SSE-Manager] ✅ Starting connection with\", this.listeners.size, \"listener(s)...\");\n        this.shouldReconnect = true;\n        // Call private async connectAsync() method\n        this.connectAsync();\n    }\n    async connectAsync() {\n        if (this.isConnecting || !this.shouldReconnect) {\n            console.log(\"[SSE-Manager] connect() called but already connecting or shouldReconnect=false\");\n            return;\n        }\n        // Double-check listeners before starting connection\n        // If no listeners, wait for React Strict Mode to finish\n        // Instead of aborting, we retry after a delay to handle React Strict Mode\n        if (this.listeners.size === 0) {\n            console.warn(\"[SSE-Manager] ⚠️ No listeners before starting connection, waiting 1500ms for React Strict Mode...\");\n            await new Promise((resolve)=>setTimeout(resolve, 1500));\n            if (this.listeners.size === 0) {\n                console.warn(\"[SSE-Manager] ⚠️ Still no listeners after wait - will retry connection attempt later\");\n                this.isConnecting = false;\n                // Retry connection after React Strict Mode cycle completes\n                // This ensures we don't permanently abort during development\n                setTimeout(()=>{\n                    if (this.listeners.size > 0 && !this.isConnected && !this.isConnecting) {\n                        console.log(\"[SSE-Manager] ✅ Retrying connection after React Strict Mode (listeners:\", this.listeners.size, \")\");\n                        this.startConnection();\n                    }\n                }, 2000);\n                return;\n            }\n            console.log(\"[SSE-Manager] ✅ Listeners registered after wait (count:\", this.listeners.size, \"), proceeding with connection\");\n        }\n        this.isConnecting = true;\n        this.abortController = new AbortController();\n        const token =  true ? localStorage.getItem(\"access_token\") : 0;\n        if (!token) {\n            console.error(\"[SSE-Manager] No token available\");\n            this.isConnecting = false;\n            return;\n        }\n        const url = \"\".concat(this.apiBaseUrl, \"/notifications/stream\");\n        let reconnectDelay = 1000;\n        try {\n            var _this_abortController, _response_body;\n            console.log(\"[SSE-Manager] Fetching SSE stream, listeners:\", this.listeners.size);\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    Authorization: \"Bearer \".concat(token),\n                    Accept: \"text/event-stream\"\n                },\n                signal: (_this_abortController = this.abortController) === null || _this_abortController === void 0 ? void 0 : _this_abortController.signal\n            });\n            if (!response.ok) {\n                throw new Error(\"SSE connection failed: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            const reader = (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.getReader();\n            const decoder = new TextDecoder();\n            if (!reader) {\n                throw new Error(\"No reader available\");\n            }\n            let buffer = \"\";\n            this.isConnecting = false;\n            this.isConnected = true;\n            console.log(\"[SSE-Manager] ✅ Connected to notification stream, listeners:\", this.listeners.size);\n            reconnectDelay = 1000;\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) {\n                    console.log(\"[SSE-Manager] ⚠️ Stream ended, reconnecting in\", reconnectDelay, \"ms...\");\n                    this.isConnected = false;\n                    this.isConnecting = false;\n                    if (this.shouldReconnect && this.listeners.size > 0) {\n                        this.reconnectTimeout = setTimeout(()=>{\n                            reconnectDelay = Math.min(reconnectDelay * 2, 30000);\n                            this.connectAsync();\n                        }, reconnectDelay);\n                    }\n                    break;\n                }\n                buffer += decoder.decode(value, {\n                    stream: true\n                });\n                // Process complete events (SSE format: event: <type>\\ndata: <data>\\n\\n)\n                while(buffer.includes(\"\\n\\n\") || buffer.includes(\"\\n\") && buffer.endsWith(\"\\n\")){\n                    var _eventLines_;\n                    let eventEndIndex = buffer.indexOf(\"\\n\\n\");\n                    if (eventEndIndex === -1 && buffer.endsWith(\"\\n\")) {\n                        eventEndIndex = buffer.length - 1;\n                    }\n                    if (eventEndIndex === -1) break;\n                    const eventText = buffer.substring(0, eventEndIndex);\n                    buffer = buffer.substring(eventEndIndex + 2);\n                    let eventType = \"message\" // Default SSE event type\n                    ;\n                    let eventData = \"\";\n                    // Parse SSE format lines (split by \\n or \\r\\n)\n                    const eventLines = eventText.split(/\\r?\\n/);\n                    for(let i = 0; i < eventLines.length; i++){\n                        const line = eventLines[i];\n                        const trimmedLine = line.trim();\n                        if (!trimmedLine) continue; // Skip empty lines\n                        const lowerLine = trimmedLine.toLowerCase();\n                        // Parse event type: \"event:connected\" or \"event: connected\" (case-insensitive)\n                        if (lowerLine.startsWith(\"event:\")) {\n                            const afterColon = trimmedLine.substring(6) // After \"event:\"\n                            ;\n                            eventType = afterColon.trim();\n                            console.log(\"[SSE-Manager] 🔍 Found event type:\", eventType, \"from line:\", line.substring(0, 50));\n                            continue;\n                        }\n                        // Parse data: \"data:{\\\"message\\\":\\\"...\\\"}\" or \"data: {\\\"message\\\":\\\"...\\\"}\" (case-insensitive)\n                        if (lowerLine.startsWith(\"data:\")) {\n                            const afterColon = trimmedLine.substring(5) // After \"data:\"\n                            ;\n                            const lineData = afterColon.trim();\n                            // Handle multi-line data (join with newline)\n                            if (eventData) {\n                                eventData += \"\\n\" + lineData;\n                            } else {\n                                eventData = lineData;\n                            }\n                            console.log(\"[SSE-Manager] 🔍 Found data line:\", lineData.substring(0, 50), \"...\");\n                            continue;\n                        }\n                    // Ignore other lines (comments starting with \":\", id, retry, etc.)\n                    }\n                    // Debug: Log what we parsed\n                    console.log(\"[SSE-Manager] 📦 Parsed SSE event:\", {\n                        type: eventType,\n                        hasData: !!eventData,\n                        dataLength: eventData.length,\n                        rawLines: eventLines.length,\n                        firstLine: (_eventLines_ = eventLines[0]) === null || _eventLines_ === void 0 ? void 0 : _eventLines_.substring(0, 50),\n                        preview: eventText.substring(0, 200)\n                    });\n                    // Process event - only process if there's data\n                    if (!eventData) {\n                        // Skip events without data (like empty heartbeats or connection messages)\n                        if (eventType === \"heartbeat\" || eventType === \"connected\" || eventType === \"message\") {\n                            console.log(\"[SSE-Manager] ⏭️ Skipping empty\", eventType, \"event (no data)\");\n                        } else {\n                            console.log(\"[SSE-Manager] ⚠️ Received event with no data:\", eventType);\n                        }\n                        continue;\n                    }\n                    console.log(\"[SSE-Manager] 📥 Processing SSE event:\", {\n                        eventType,\n                        dataLength: eventData.length\n                    });\n                    if (eventType === \"notification\") {\n                        try {\n                            var _notification_message;\n                            const notification = JSON.parse(eventData);\n                            console.log(\"[SSE-Manager] 📬 Parsed notification:\", {\n                                id: notification.id,\n                                title: notification.title,\n                                message: (_notification_message = notification.message) === null || _notification_message === void 0 ? void 0 : _notification_message.substring(0, 50),\n                                category: notification.category\n                            });\n                            reconnectDelay = 1000;\n                            // Notify all listeners - use Array.from to avoid iterator issues\n                            const listenersToNotify = Array.from(this.listeners);\n                            console.log(\"[SSE-Manager] 📢 Broadcasting to\", listenersToNotify.length, \"listener(s)\");\n                            // Notify listeners synchronously to ensure immediate delivery\n                            listenersToNotify.forEach((listener)=>{\n                                try {\n                                    console.log(\"[SSE-Manager] 📤 Calling listener with notification:\", notification.id);\n                                    listener(notification);\n                                    console.log(\"[SSE-Manager] ✅ Listener called successfully\");\n                                } catch (error) {\n                                    console.error(\"[SSE-Manager] ❌ Error in listener:\", error);\n                                }\n                            });\n                        } catch (error) {\n                            console.error(\"[SSE-Manager] ❌ Parse error:\", error, \"Event data:\", eventData);\n                        }\n                    } else if (eventType === \"connected\") {\n                        console.log(\"[SSE-Manager] ✅ Server confirmed connection\");\n                        reconnectDelay = 1000;\n                    } else if (eventType === \"heartbeat\") {\n                        console.log(\"[SSE-Manager] 💓 Heartbeat received\");\n                        reconnectDelay = 1000;\n                    } else {\n                        console.log(\"[SSE-Manager] ℹ️ Unknown event type:\", eventType);\n                    }\n                }\n            }\n        } catch (error) {\n            this.isConnected = false;\n            this.isConnecting = false;\n            if (error.name !== \"AbortError\") {\n                console.error(\"[SSE-Manager] ❌ Connection error:\", error);\n                this.errorListeners.forEach((listener)=>{\n                    try {\n                        listener(error);\n                    } catch (err) {\n                        console.error(\"[SSE-Manager] Error in error listener:\", err);\n                    }\n                });\n                // Auto-reconnect on error\n                if (this.shouldReconnect && this.listeners.size > 0) {\n                    this.reconnectTimeout = setTimeout(()=>{\n                        reconnectDelay = Math.min(reconnectDelay * 2, 30000);\n                        this.connectAsync();\n                    }, reconnectDelay);\n                }\n            }\n        }\n    }\n    disconnect() {\n        this.shouldReconnect = false;\n        this.isConnected = false;\n        this.isConnecting = false;\n        if (this.abortController) {\n            this.abortController.abort();\n            this.abortController = null;\n        }\n        if (this.reconnectTimeout) {\n            clearTimeout(this.reconnectTimeout);\n            this.reconnectTimeout = null;\n        }\n        console.log(\"[SSE-Manager] Disconnected from notification stream\");\n    }\n    // Public method to manually disconnect (when user logs out, etc.)\n    destroy() {\n        this.listeners.clear();\n        this.errorListeners.clear();\n        this.disconnect();\n        console.log(\"[SSE-Manager] Destroyed all connections\");\n    }\n    // Check if connected\n    getConnected() {\n        return this.isConnected;\n    }\n    // Get listener count\n    getListenerCount() {\n        return this.listeners.size;\n    }\n    constructor(){\n        this.abortController = null;\n        this.reconnectTimeout = null;\n        this.shouldReconnect = true;\n        this.listeners = new Set();\n        this.errorListeners = new Set();\n        this.isConnected = false;\n        this.isConnecting = false;\n        this.apiBaseUrl = \"http://localhost:8080/api/v1\" || 0;\n    }\n}\n// Singleton instance\nconst sseManager = new SSEManager();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api/sse-manager.ts\n"));

/***/ })

}]);