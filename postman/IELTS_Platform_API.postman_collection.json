{
	"info": {
		"_postman_id": "ielts-platform-api",
		"name": "IELTS Learning Platform API",
		"description": "Complete API collection for IELTS Learning Platform microservices with automated scripts for token management and testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if expired",
					"const accessToken = pm.environment.get('access_token');",
					"const tokenExpiry = pm.environment.get('token_expiry');",
					"",
					"if (accessToken && tokenExpiry) {",
					"    const now = new Date().getTime();",
					"    const expiry = new Date(tokenExpiry).getTime();",
					"    ",
					"    // Refresh token if it expires in less than 5 minutes",
					"    if (now >= expiry - 300000) {",
					"        console.log('Token expired or expiring soon, refreshing...');",
					"        const refreshToken = pm.environment.get('refresh_token');",
					"        ",
					"        if (refreshToken) {",
					"            pm.sendRequest({",
					"                url: pm.environment.get('base_url') + '/api/v1/auth/refresh',",
					"                method: 'POST',",
					"                header: {",
					"                    'Content-Type': 'application/json'",
					"                },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify({ refresh_token: refreshToken })",
					"                }",
					"            }, function(err, response) {",
					"                if (!err && response.code === 200) {",
					"                    const data = response.json().data;",
					"                    pm.environment.set('access_token', data.access_token);",
					"                    const newExpiry = new Date(new Date().getTime() + data.expires_in * 1000);",
					"                    pm.environment.set('token_expiry', newExpiry.toISOString());",
					"                    console.log('Token refreshed successfully');",
					"                }",
					"            });",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Automatic test for all responses",
					"pm.test('Response time is less than 2000ms', function() {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test('Response has JSON content type', function() {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Auth Service",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Service is healthy', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.status).to.equal('healthy');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					}
				},
				{
					"name": "Register Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random email for testing",
									"const randomEmail = 'student_' + Math.floor(Math.random() * 10000) + '@test.com';",
									"pm.environment.set('test_student_email', randomEmail);",
									"pm.environment.set('test_student_password', 'Test@1234');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Registration successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"    pm.expect(jsonData.data).to.have.property('refresh_token');",
									"    pm.expect(jsonData.data.role).to.equal('student');",
									"    ",
									"    // Save tokens to environment",
									"    pm.environment.set('access_token', jsonData.data.access_token);",
									"    pm.environment.set('refresh_token', jsonData.data.refresh_token);",
									"    pm.environment.set('user_id', jsonData.data.user_id);",
									"    ",
									"    // Calculate token expiry",
									"    const expiresIn = jsonData.data.expires_in;",
									"    const expiryDate = new Date(new Date().getTime() + expiresIn * 1000);",
									"    pm.environment.set('token_expiry', expiryDate.toISOString());",
									"    ",
									"    console.log('Registered user:', jsonData.data.email);",
									"    console.log('Access token saved to environment');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_student_email}}\",\n    \"password\": \"{{test_student_password}}\",\n    \"phone\": \"+84901234567\",\n    \"role\": \"student\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Register Instructor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = 'instructor_' + Math.floor(Math.random() * 10000) + '@test.com';",
									"pm.environment.set('test_instructor_email', randomEmail);",
									"pm.environment.set('test_instructor_password', 'Instructor@1234');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Instructor registered', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.role).to.equal('instructor');",
									"    ",
									"    pm.environment.set('instructor_access_token', jsonData.data.access_token);",
									"    pm.environment.set('instructor_refresh_token', jsonData.data.refresh_token);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_instructor_email}}\",\n    \"password\": \"{{test_instructor_password}}\",\n    \"phone\": \"+84909876543\",\n    \"role\": \"instructor\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Login successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"    pm.expect(jsonData.data).to.have.property('refresh_token');",
									"    ",
									"    // Update tokens in environment",
									"    pm.environment.set('access_token', jsonData.data.access_token);",
									"    pm.environment.set('refresh_token', jsonData.data.refresh_token);",
									"    pm.environment.set('user_id', jsonData.data.user_id);",
									"    ",
									"    const expiresIn = jsonData.data.expires_in;",
									"    const expiryDate = new Date(new Date().getTime() + expiresIn * 1000);",
									"    pm.environment.set('token_expiry', expiryDate.toISOString());",
									"    ",
									"    console.log('Login successful, tokens updated');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_student_email}}\",\n    \"password\": \"{{test_student_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					}
				},
				{
					"name": "Validate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Token is valid', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "validate"]
						}
					}
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Token refreshed', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"    ",
									"    // Update access token",
									"    pm.environment.set('access_token', jsonData.data.access_token);",
									"    ",
									"    const expiresIn = jsonData.data.expires_in;",
									"    const expiryDate = new Date(new Date().getTime() + expiresIn * 1000);",
									"    pm.environment.set('token_expiry', expiryDate.toISOString());",
									"    ",
									"    console.log('Access token refreshed');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "refresh"]
						}
					}
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Password changed', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"{{test_student_password}}\",\n    \"new_password\": \"NewPassword@1234\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/change-password",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "change-password"]
						}
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Logout successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    ",
									"    // Clear tokens from environment",
									"    pm.environment.unset('access_token');",
									"    pm.environment.unset('refresh_token');",
									"    pm.environment.unset('token_expiry');",
									"    ",
									"    console.log('Logged out, tokens cleared');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "logout"]
						}
					}
				}
			]
		},
		{
			"name": "Google OAuth",
			"description": "Google OAuth 2.0 authentication flow. This provides an alternative login method using Google accounts. The flow involves: 1) Initiate OAuth by redirecting to Google, 2) User authorizes on Google, 3) Callback receives authorization code and exchanges for JWT tokens.",
			"item": [
				{
					"name": "Initiate Google OAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Returns Google OAuth URL', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('auth_url');",
									"    pm.expect(jsonData.data.auth_url).to.include('accounts.google.com');",
									"    pm.expect(jsonData.data.auth_url).to.include('client_id');",
									"    pm.expect(jsonData.data.auth_url).to.include('redirect_uri');",
									"    pm.expect(jsonData.data.auth_url).to.include('state');",
									"    ",
									"    console.log('Google OAuth URL:', jsonData.data.auth_url);",
									"    console.log('⚠️  Open this URL in a browser to complete OAuth flow');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "google"]
						},
						"description": "Initiates the Google OAuth 2.0 flow by generating an authorization URL with a CSRF state token. The response includes the URL that the user should visit to authorize with Google. After authorization, Google will redirect to the callback endpoint with an authorization code."
					}
				},
				{
					"name": "Google OAuth Callback (Manual Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('OAuth authentication successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"    pm.expect(jsonData.data).to.have.property('refresh_token');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"    pm.expect(jsonData.data.role).to.equal('student');",
									"    ",
									"    // Save tokens to environment",
									"    pm.environment.set('access_token', jsonData.data.access_token);",
									"    pm.environment.set('refresh_token', jsonData.data.refresh_token);",
									"    pm.environment.set('user_id', jsonData.data.user_id);",
									"    ",
									"    // Calculate token expiry",
									"    const expiresIn = jsonData.data.expires_in;",
									"    const expiryDate = new Date(new Date().getTime() + expiresIn * 1000);",
									"    pm.environment.set('token_expiry', expiryDate.toISOString());",
									"    ",
									"    console.log('Google OAuth successful for:', jsonData.data.email);",
									"    console.log('User ID:', jsonData.data.user_id);",
									"    console.log('Access token saved to environment');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google/callback?code=PASTE_AUTH_CODE_HERE&state=PASTE_STATE_HERE",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "google", "callback"],
							"query": [
								{
									"key": "code",
									"value": "PASTE_AUTH_CODE_HERE",
									"description": "Authorization code received from Google after user authorization"
								},
								{
									"key": "state",
									"value": "PASTE_STATE_HERE",
									"description": "CSRF protection state token (must match the one from initiate request)"
								}
							]
						},
						"description": "Handles the OAuth callback from Google. This endpoint:\n1. Validates the state parameter for CSRF protection\n2. Exchanges the authorization code for an access token\n3. Fetches user info from Google\n4. Creates or links the user account\n5. Generates JWT tokens for the application\n\n⚠️ Manual Testing Required:\n1. Call 'Initiate Google OAuth' endpoint\n2. Copy the auth_url from the response\n3. Open the URL in a browser\n4. Authorize with Google\n5. After redirect, copy the 'code' and 'state' parameters from the URL\n6. Paste them into this request and execute\n\n🔄 Account Linking:\nIf an account with the same email already exists, it will be linked to the Google account automatically."
					}
				}
			]
		},
		{
			"name": "Auth Service - Error Cases",
			"description": "Comprehensive error handling tests for all failure scenarios",
			"item": [
				{
					"name": "Register - Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Returns VALIDATION_ERROR code', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
									"    pm.expect(jsonData.error.message).to.include('Email');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"not-an-email\",\n    \"password\": \"Test@123456\",\n    \"role\": \"student\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Register - Weak Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Returns VALIDATION_ERROR for weak password', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
									"    pm.expect(jsonData.error.message).to.include('Password');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"123\",\n    \"role\": \"student\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Register - Duplicate Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use existing test student email to trigger duplicate",
									"const existingEmail = pm.environment.get('test_student_email') || 'student1@test.com';",
									"pm.collectionVariables.set('duplicate_email', existingEmail);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Returns EMAIL_EXISTS error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('EMAIL_EXISTS');",
									"    pm.expect(jsonData.error.message).to.include('already registered');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{duplicate_email}}\",\n    \"password\": \"Test@123456\",\n    \"role\": \"student\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns INVALID_CREDENTIALS error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('INVALID_CREDENTIALS');",
									"    pm.expect(jsonData.error.message).to.include('Invalid email or password');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"WrongPassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					}
				},
				{
					"name": "Login - Empty Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Returns VALIDATION_ERROR', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					}
				},
				{
					"name": "Validate Token - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns NO_TOKEN error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('NO_TOKEN');",
									"    pm.expect(jsonData.error.message).to.include('Authorization header required');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "validate"]
						}
					}
				},
				{
					"name": "Validate Token - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns INVALID_TOKEN error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('INVALID_TOKEN');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_12345",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "validate"]
						}
					}
				},
				{
					"name": "Refresh Token - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns INVALID_TOKEN error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('INVALID_TOKEN');",
									"    pm.expect(jsonData.error.message).to.include('Invalid or expired');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"invalid-refresh-token-123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "refresh"]
						}
					}
				},
				{
					"name": "Change Password - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns UNAUTHORIZED error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('UNAUTHORIZED');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"Test@123456\",\n    \"new_password\": \"NewTest@123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/change-password",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "change-password"]
						}
					}
				},
				{
					"name": "Logout - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns UNAUTHORIZED error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('UNAUTHORIZED');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"some-token\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "logout"]
						}
					}
				}
			]
		},
		{
			"name": "User Service",
			"description": "User profile management, learning progress tracking, and study statistics",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Service is healthy', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.status).to.equal('healthy');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/health",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["health"]
						}
					}
				},
				{
					"name": "Get My Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile retrieved successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('timezone');",
									"    pm.expect(jsonData.data).to.have.property('language_preference');",
									"    ",
									"    console.log('Profile:', jsonData.data);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/api/v1/user/profile",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "profile"]
						},
						"description": "Get current user's profile. Profile is automatically created if it doesn't exist."
					}
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile updated successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('full_name');",
									"    ",
									"    console.log('Updated profile:', jsonData.data);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"current_level\": \"intermediate\",\n    \"target_band_score\": 7.5,\n    \"bio\": \"I am preparing for IELTS exam\",\n    \"city\": \"Ho Chi Minh City\",\n    \"country\": \"Vietnam\"\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/user/profile",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "profile"]
						},
						"description": "Update user profile information. All fields are optional."
					}
				},
				{
					"name": "Update Avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Avatar updated successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('Avatar updated');",
									"    pm.expect(jsonData.data).to.have.property('avatar_url');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"avatar_url\": \"https://example.com/avatars/user-avatar.jpg\"\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/user/profile/avatar",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "profile", "avatar"]
						},
						"description": "Update user's avatar URL"
					}
				},
				{
					"name": "Get Progress Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Progress stats retrieved', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('profile');",
									"    pm.expect(jsonData.data).to.have.property('progress');",
									"    pm.expect(jsonData.data).to.have.property('recent_sessions');",
									"    pm.expect(jsonData.data).to.have.property('achievements');",
									"    pm.expect(jsonData.data).to.have.property('total_points');",
									"    ",
									"    console.log('Total study hours:', jsonData.data.progress.total_study_hours);",
									"    console.log('Current streak:', jsonData.data.progress.current_streak_days, 'days');",
									"    console.log('Total points:', jsonData.data.total_points);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/api/v1/user/progress",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "progress"]
						},
						"description": "Get comprehensive learning progress statistics including profile, progress, recent sessions, and achievements"
					}
				},
				{
					"name": "Start Study Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Session started successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('started_at');",
									"    pm.expect(jsonData.data.is_completed).to.be.false;",
									"    ",
									"    // Save session ID for ending session later",
									"    pm.environment.set('active_session_id', jsonData.data.id);",
									"    console.log('Session started:', jsonData.data.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"session_type\": \"lesson\",\n    \"skill_type\": \"listening\",\n    \"device_type\": \"web\"\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/user/sessions",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "sessions"]
						},
						"description": "Start a new study session. Session types: lesson, exercise, practice_test. Skill types: listening, reading, writing, speaking"
					}
				},
				{
					"name": "End Study Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Session ended successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('ended successfully');",
									"    ",
									"    // Clear session ID",
									"    pm.environment.unset('active_session_id');",
									"    console.log('Session ended successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"completion_percentage\": 100,\n    \"score\": 8.5\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/user/sessions/{{active_session_id}}/end",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "sessions", "{{active_session_id}}", "end"]
						},
						"description": "End an active study session. Automatically calculates duration and updates progress."
					}
				},
				{
					"name": "Get Study History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('History retrieved', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('sessions');",
									"    pm.expect(jsonData.data).to.have.property('count');",
									"    pm.expect(jsonData.data.sessions).to.be.an('array');",
									"    ",
									"    console.log('Total sessions:', jsonData.data.count);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/api/v1/user/progress/history?limit=20",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "progress", "history"],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "Number of sessions to retrieve (default: 20, max: 100)"
								}
							]
						},
						"description": "Get study session history"
					}
				}
			]
		}
	]
}
