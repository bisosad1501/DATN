{
	"info": {
		"_postman_id": "ielts-platform-api",
		"name": "IELTS Learning Platform API",
		"description": "Complete API collection for IELTS Learning Platform microservices with automated scripts for token management and testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if expired",
					"const accessToken = pm.environment.get('access_token');",
					"const tokenExpiry = pm.environment.get('token_expiry');",
					"",
					"if (accessToken && tokenExpiry) {",
					"    const now = new Date().getTime();",
					"    const expiry = new Date(tokenExpiry).getTime();",
					"    ",
					"    // Refresh token if it expires in less than 5 minutes",
					"    if (now >= expiry - 300000) {",
					"        console.log('Token expired or expiring soon, refreshing...');",
					"        const refreshToken = pm.environment.get('refresh_token');",
					"        ",
					"        if (refreshToken) {",
					"            pm.sendRequest({",
					"                url: pm.environment.get('base_url') + '/api/v1/auth/refresh',",
					"                method: 'POST',",
					"                header: {",
					"                    'Content-Type': 'application/json'",
					"                },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify({ refresh_token: refreshToken })",
					"                }",
					"            }, function(err, response) {",
					"                if (!err && response.code === 200) {",
					"                    const data = response.json().data;",
					"                    pm.environment.set('access_token', data.access_token);",
					"                    const newExpiry = new Date(new Date().getTime() + data.expires_in * 1000);",
					"                    pm.environment.set('token_expiry', newExpiry.toISOString());",
					"                    console.log('Token refreshed successfully');",
					"                }",
					"            });",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Automatic test for all responses",
					"pm.test('Response time is less than 2000ms', function() {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test('Response has JSON content type', function() {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Auth Service",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Service is healthy', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.status).to.equal('healthy');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					}
				},
				{
					"name": "Register Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random email for testing",
									"const randomEmail = 'student_' + Math.floor(Math.random() * 10000) + '@test.com';",
									"pm.environment.set('test_student_email', randomEmail);",
									"pm.environment.set('test_student_password', 'Test@1234');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Registration successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"    pm.expect(jsonData.data).to.have.property('refresh_token');",
									"    pm.expect(jsonData.data.role).to.equal('student');",
									"    ",
									"    // Save tokens to environment",
									"    pm.environment.set('access_token', jsonData.data.access_token);",
									"    pm.environment.set('refresh_token', jsonData.data.refresh_token);",
									"    pm.environment.set('user_id', jsonData.data.user_id);",
									"    ",
									"    // Calculate token expiry",
									"    const expiresIn = jsonData.data.expires_in;",
									"    const expiryDate = new Date(new Date().getTime() + expiresIn * 1000);",
									"    pm.environment.set('token_expiry', expiryDate.toISOString());",
									"    ",
									"    console.log('Registered user:', jsonData.data.email);",
									"    console.log('Access token saved to environment');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_student_email}}\",\n    \"password\": \"{{test_student_password}}\",\n    \"phone\": \"+84901234567\",\n    \"role\": \"student\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Register Instructor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomEmail = 'instructor_' + Math.floor(Math.random() * 10000) + '@test.com';",
									"pm.environment.set('test_instructor_email', randomEmail);",
									"pm.environment.set('test_instructor_password', 'Instructor@1234');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Instructor registered', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.role).to.equal('instructor');",
									"    ",
									"    pm.environment.set('instructor_access_token', jsonData.data.access_token);",
									"    pm.environment.set('instructor_refresh_token', jsonData.data.refresh_token);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_instructor_email}}\",\n    \"password\": \"{{test_instructor_password}}\",\n    \"phone\": \"+84909876543\",\n    \"role\": \"instructor\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Login successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"    pm.expect(jsonData.data).to.have.property('refresh_token');",
									"    ",
									"    // Update tokens in environment",
									"    pm.environment.set('access_token', jsonData.data.access_token);",
									"    pm.environment.set('refresh_token', jsonData.data.refresh_token);",
									"    pm.environment.set('user_id', jsonData.data.user_id);",
									"    ",
									"    const expiresIn = jsonData.data.expires_in;",
									"    const expiryDate = new Date(new Date().getTime() + expiresIn * 1000);",
									"    pm.environment.set('token_expiry', expiryDate.toISOString());",
									"    ",
									"    console.log('Login successful, tokens updated');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_student_email}}\",\n    \"password\": \"{{test_student_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					}
				},
				{
					"name": "Validate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Token is valid', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "validate"]
						}
					}
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Token refreshed', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"    ",
									"    // Update access token",
									"    pm.environment.set('access_token', jsonData.data.access_token);",
									"    ",
									"    const expiresIn = jsonData.data.expires_in;",
									"    const expiryDate = new Date(new Date().getTime() + expiresIn * 1000);",
									"    pm.environment.set('token_expiry', expiryDate.toISOString());",
									"    ",
									"    console.log('Access token refreshed');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "refresh"]
						}
					}
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Password changed', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"{{test_student_password}}\",\n    \"new_password\": \"NewPassword@1234\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/change-password",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "change-password"]
						}
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Logout successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    ",
									"    // Clear tokens from environment",
									"    pm.environment.unset('access_token');",
									"    pm.environment.unset('refresh_token');",
									"    pm.environment.unset('token_expiry');",
									"    ",
									"    console.log('Logged out, tokens cleared');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "logout"]
						}
					}
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Reset code sent', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('sent');",
									"    ",
									"    console.log('⚠️  Check email for 6-digit reset code (expires in 15 minutes)');",
									"    console.log('⚠️  Use the code in \"Reset Password By Code\" request');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_student_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/forgot-password",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "forgot-password"]
						},
						"description": "Sends a 6-digit verification code to the user's email for password reset. The code expires in 15 minutes."
					}
				},
				{
					"name": "Reset Password By Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set a test code - replace with actual code from email",
									"pm.environment.set('reset_code', '123456');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Password reset successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('successfully');",
									"    ",
									"    // Update password in environment",
									"    pm.environment.set('test_student_password', 'NewReset@1234');",
									"    ",
									"    console.log('Password reset successful');",
									"    console.log('⚠️  All refresh tokens have been revoked for security');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"{{reset_code}}\",\n    \"new_password\": \"NewReset@1234\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/reset-password-by-code",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "reset-password-by-code"]
						},
						"description": "Resets password using the 6-digit code received via email. All refresh tokens will be revoked for security."
					}
				},
				{
					"name": "Reset Password (Legacy - By Token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set a test token - replace with actual token from email link",
									"pm.environment.set('reset_token', 'paste-token-here');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Password reset successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{reset_token}}\",\n    \"new_password\": \"NewReset@1234\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/reset-password",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "reset-password"]
						},
						"description": "Legacy endpoint: Resets password using long token from email link. Use \"Reset Password By Code\" for new implementation."
					}
				},
				{
					"name": "Verify Email By Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set a test code - replace with actual code from email",
									"pm.environment.set('verification_code', '123456');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Email verified successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('verified');",
									"    ",
									"    console.log('Email verified successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"{{verification_code}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/verify-email-by-code",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "verify-email-by-code"]
						},
						"description": "Verifies email using the 6-digit code received via email. The code expires in 24 hours."
					}
				},
				{
					"name": "Verify Email (Legacy - By Token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set a test token - replace with actual token from email link",
									"pm.environment.set('verification_token', 'paste-token-here');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Email verified successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('verified');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/verify-email?token={{verification_token}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "verify-email"],
							"query": [
								{
									"key": "token",
									"value": "{{verification_token}}",
									"description": "Verification token from email link"
								}
							]
						},
						"description": "Legacy endpoint: Verifies email using long token from email link. Use \"Verify Email By Code\" for new implementation."
					}
				},
				{
					"name": "Resend Verification Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Verification code resent', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('sent');",
									"    ",
									"    console.log('⚠️  Check email for new 6-digit verification code (expires in 24 hours)');",
									"    console.log('⚠️  Use the code in \"Verify Email By Code\" request');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_student_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/resend-verification",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "resend-verification"]
						},
						"description": "Resends a new 6-digit verification code to the user's email. The code expires in 24 hours."
					}
				}
			]
		},
		{
			"name": "Google OAuth",
			"description": "Google OAuth 2.0 authentication flow. This provides an alternative login method using Google accounts. The flow involves: 1) Initiate OAuth by redirecting to Google, 2) User authorizes on Google, 3) Callback receives authorization code and exchanges for JWT tokens.",
			"item": [
				{
					"name": "Get Google OAuth URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has JSON content type', function() {",
									"    pm.response.to.have.header('Content-Type');",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test('Returns Google OAuth URL', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('url');",
									"    pm.expect(jsonData.data).to.have.property('state');",
									"    pm.expect(jsonData.data.url).to.include('accounts.google.com');",
									"    pm.expect(jsonData.data.url).to.include('client_id');",
									"    pm.expect(jsonData.data.url).to.include('redirect_uri');",
									"    pm.expect(jsonData.data.url).to.include('state');",
									"    ",
									"    // Save state for callback",
									"    pm.environment.set('google_oauth_state', jsonData.data.state);",
									"    ",
									"    console.log('Google OAuth URL:', jsonData.data.url);",
									"    console.log('State:', jsonData.data.state);",
									"    console.log('⚠️  Open this URL in a browser to complete OAuth flow');",
									"});",
									"",
									"pm.test('Response time is less than 2000ms', function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google/url",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "google", "url"]
						},
						"description": "Returns the Google OAuth 2.0 authorization URL as JSON. This endpoint generates a URL with a CSRF state token that the client should use to redirect the user to Google for authentication. After authorization, Google will redirect to the callback endpoint.\n\n**Response:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"url\": \"https://accounts.google.com/o/oauth2/auth?...\",\n    \"state\": \"uuid-v4-token\"\n  }\n}\n```"
					}
				},
				{
					"name": "Google OAuth Callback (Manual Test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('OAuth authentication successful', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('access_token');",
									"    pm.expect(jsonData.data).to.have.property('refresh_token');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"    pm.expect(jsonData.data.role).to.equal('student');",
									"    ",
									"    // Save tokens to environment",
									"    pm.environment.set('access_token', jsonData.data.access_token);",
									"    pm.environment.set('refresh_token', jsonData.data.refresh_token);",
									"    pm.environment.set('user_id', jsonData.data.user_id);",
									"    ",
									"    // Calculate token expiry",
									"    const expiresIn = jsonData.data.expires_in;",
									"    const expiryDate = new Date(new Date().getTime() + expiresIn * 1000);",
									"    pm.environment.set('token_expiry', expiryDate.toISOString());",
									"    ",
									"    console.log('Google OAuth successful for:', jsonData.data.email);",
									"    console.log('User ID:', jsonData.data.user_id);",
									"    console.log('Access token saved to environment');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google/callback?code=PASTE_AUTH_CODE_HERE&state=PASTE_STATE_HERE",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "google", "callback"],
							"query": [
								{
									"key": "code",
									"value": "PASTE_AUTH_CODE_HERE",
									"description": "Authorization code received from Google after user authorization"
								},
								{
									"key": "state",
									"value": "PASTE_STATE_HERE",
									"description": "CSRF protection state token (must match the one from initiate request)"
								}
							]
						},
						"description": "Handles the OAuth callback from Google. This endpoint:\n1. Validates the state parameter for CSRF protection\n2. Exchanges the authorization code for an access token\n3. Fetches user info from Google\n4. Creates or links the user account\n5. Generates JWT tokens for the application\n\n⚠️ Manual Testing Required:\n1. Call 'Initiate Google OAuth' endpoint\n2. Copy the auth_url from the response\n3. Open the URL in a browser\n4. Authorize with Google\n5. After redirect, copy the 'code' and 'state' parameters from the URL\n6. Paste them into this request and execute\n\n🔄 Account Linking:\nIf an account with the same email already exists, it will be linked to the Google account automatically."
					}
				},
				{
					"name": "Google Exchange Token (Mobile)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has tokens', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('tokens');",
									"    pm.expect(jsonData.data.tokens).to.have.property('access_token');",
									"    pm.expect(jsonData.data.tokens).to.have.property('refresh_token');",
									"    ",
									"    // Save tokens",
									"    pm.environment.set('access_token', jsonData.data.tokens.access_token);",
									"    pm.environment.set('refresh_token', jsonData.data.tokens.refresh_token);",
									"    pm.environment.set('user_id', jsonData.data.user.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"PASTE_AUTH_CODE_HERE\",\n    \"state\": \"PASTE_STATE_HERE\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/google/token",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "google", "token"]
						},
						"description": "📱 Mobile/API OAuth Flow - Exchange authorization code for tokens.\n\nThis endpoint is designed for Mobile Apps, Desktop Apps, and SPAs that cannot use browser redirects.\n\n🔄 Flow:\n1. Call GET /api/v1/auth/google/url to get OAuth URL\n2. Open URL in WebView/Browser (user logs in with Google)\n3. Capture the redirect URL with 'code' parameter\n4. Send code to this endpoint\n5. Receive JWT tokens\n\n⚠️ Important:\n- OAuth codes expire in 5-10 minutes\n- Each code can only be used once\n- State parameter is optional but recommended for CSRF protection\n\n✅ Use Cases:\n- iOS/Android mobile apps\n- Desktop applications\n- Single Page Applications (SPA)\n- API-only clients\n\n💡 Example Mobile Implementation:\n```swift\n// iOS\nlet code = extractCodeFromURL(url)\nAPIClient.exchangeGoogleToken(code: code) { result in\n    // Save tokens to Keychain\n}\n```\n\n```kotlin\n// Android\nval code = uri.getQueryParameter(\"code\")\napiClient.exchangeGoogleToken(code) { tokens ->\n    // Save to SharedPreferences (encrypted)\n}\n```"
					}
				}
			]
		},
		{
			"name": "Auth Service - Error Cases",
			"description": "Comprehensive error handling tests for all failure scenarios",
			"item": [
				{
					"name": "Register - Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Returns VALIDATION_ERROR code', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
									"    pm.expect(jsonData.error.message).to.include('Email');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"not-an-email\",\n    \"password\": \"Test@123456\",\n    \"role\": \"student\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Register - Weak Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Returns VALIDATION_ERROR for weak password', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
									"    pm.expect(jsonData.error.message).to.include('Password');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"123\",\n    \"role\": \"student\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Register - Duplicate Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use existing test student email to trigger duplicate",
									"const existingEmail = pm.environment.get('test_student_email') || 'student1@test.com';",
									"pm.collectionVariables.set('duplicate_email', existingEmail);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Returns EMAIL_EXISTS error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('EMAIL_EXISTS');",
									"    pm.expect(jsonData.error.message).to.include('already registered');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{duplicate_email}}\",\n    \"password\": \"Test@123456\",\n    \"role\": \"student\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					}
				},
				{
					"name": "Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns INVALID_CREDENTIALS error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('INVALID_CREDENTIALS');",
									"    pm.expect(jsonData.error.message).to.include('Invalid email or password');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"WrongPassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					}
				},
				{
					"name": "Login - Empty Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Returns VALIDATION_ERROR', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					}
				},
				{
					"name": "Validate Token - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns NO_TOKEN error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('NO_TOKEN');",
									"    pm.expect(jsonData.error.message).to.include('Authorization header required');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "validate"]
						}
					}
				},
				{
					"name": "Validate Token - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns INVALID_TOKEN error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('INVALID_TOKEN');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_12345",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/validate",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "validate"]
						}
					}
				},
				{
					"name": "Refresh Token - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns INVALID_TOKEN error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('INVALID_TOKEN');",
									"    pm.expect(jsonData.error.message).to.include('Invalid or expired');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"invalid-refresh-token-123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "refresh"]
						}
					}
				},
				{
					"name": "Change Password - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns UNAUTHORIZED error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('UNAUTHORIZED');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"old_password\": \"Test@123456\",\n    \"new_password\": \"NewTest@123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/change-password",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "change-password"]
						}
					}
				},
				{
					"name": "Logout - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Returns UNAUTHORIZED error', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error.code).to.equal('UNAUTHORIZED');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"some-token\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "logout"]
						}
					}
				}
			]
		},
		{
			"name": "User Service",
			"description": "User profile management, learning progress tracking, and study statistics",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Service is healthy', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.status).to.equal('healthy');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/health",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["health"]
						}
					}
				},
				{
					"name": "Get My Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile retrieved successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('timezone');",
									"    pm.expect(jsonData.data).to.have.property('language_preference');",
									"    ",
									"    console.log('Profile:', jsonData.data);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/api/v1/user/profile",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "profile"]
						},
						"description": "Get current user's profile. Profile is automatically created if it doesn't exist."
					}
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile updated successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('full_name');",
									"    ",
									"    console.log('Updated profile:', jsonData.data);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"current_level\": \"intermediate\",\n    \"target_band_score\": 7.5,\n    \"bio\": \"I am preparing for IELTS exam\",\n    \"city\": \"Ho Chi Minh City\",\n    \"country\": \"Vietnam\"\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/user/profile",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "profile"]
						},
						"description": "Update user profile information. All fields are optional."
					}
				},
				{
					"name": "Update Avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Avatar updated successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('Avatar updated');",
									"    pm.expect(jsonData.data).to.have.property('avatar_url');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"avatar_url\": \"https://example.com/avatars/user-avatar.jpg\"\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/user/profile/avatar",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "profile", "avatar"]
						},
						"description": "Update user's avatar URL"
					}
				},
				{
					"name": "Get Progress Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Progress stats retrieved', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('profile');",
									"    pm.expect(jsonData.data).to.have.property('progress');",
									"    pm.expect(jsonData.data).to.have.property('recent_sessions');",
									"    pm.expect(jsonData.data).to.have.property('achievements');",
									"    pm.expect(jsonData.data).to.have.property('total_points');",
									"    ",
									"    console.log('Total study hours:', jsonData.data.progress.total_study_hours);",
									"    console.log('Current streak:', jsonData.data.progress.current_streak_days, 'days');",
									"    console.log('Total points:', jsonData.data.total_points);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/api/v1/user/progress",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "progress"]
						},
						"description": "Get comprehensive learning progress statistics including profile, progress, recent sessions, and achievements"
					}
				},
				{
					"name": "Start Study Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Session started successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.expect(jsonData.data).to.have.property('started_at');",
									"    pm.expect(jsonData.data.is_completed).to.be.false;",
									"    ",
									"    // Save session ID for ending session later",
									"    pm.environment.set('active_session_id', jsonData.data.id);",
									"    console.log('Session started:', jsonData.data.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"session_type\": \"lesson\",\n    \"skill_type\": \"listening\",\n    \"device_type\": \"web\"\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/user/sessions",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "sessions"]
						},
						"description": "Start a new study session. Session types: lesson, exercise, practice_test. Skill types: listening, reading, writing, speaking"
					}
				},
				{
					"name": "End Study Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Session ended successfully', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('ended successfully');",
									"    ",
									"    // Clear session ID",
									"    pm.environment.unset('active_session_id');",
									"    console.log('Session ended successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"completion_percentage\": 100,\n    \"score\": 8.5\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/user/sessions/{{active_session_id}}/end",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "sessions", "{{active_session_id}}", "end"]
						},
						"description": "End an active study session. Automatically calculates duration and updates progress."
					}
				},
				{
					"name": "Get Study History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('History retrieved', function() {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('sessions');",
									"    pm.expect(jsonData.data).to.have.property('count');",
									"    pm.expect(jsonData.data.sessions).to.be.an('array');",
									"    ",
									"    console.log('Total sessions:', jsonData.data.count);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/api/v1/user/progress/history?limit=20",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8082",
							"path": ["api", "v1", "user", "progress", "history"],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "Number of sessions to retrieve (default: 20, max: 100)"
								}
							]
						},
						"description": "Get study session history"
					}
				},
				{
					"name": "User Preferences",
					"item": [
						{
							"name": "Get Preferences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Preferences retrieved', function() {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.data).to.have.property('theme');",
											"    pm.expect(jsonData.data).to.have.property('font_size');",
											"    pm.expect(jsonData.data).to.have.property('email_notifications');",
											"    console.log('User preferences:', jsonData.data);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/preferences",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "preferences"]
								},
								"description": "Get user preferences. Auto-creates defaults if not exists."
							}
						},
						{
							"name": "Update Preferences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Preferences updated', function() {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('updated');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"theme\": \"dark\",\n    \"font_size\": \"large\",\n    \"email_notifications\": true,\n    \"push_notifications\": true,\n    \"study_reminders\": true,\n    \"auto_play_next_lesson\": false,\n    \"show_answer_explanation\": true,\n    \"playback_speed\": 1.5\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/user/preferences",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "preferences"]
								},
								"description": "Update user preferences. All fields are optional."
							}
						}
					]
				},
				{
					"name": "Study Goals",
					"item": [
						{
							"name": "Create Goal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Goal created successfully', function() {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.data).to.have.property('id');",
											"    pm.expect(jsonData.data).to.have.property('title');",
											"    pm.expect(jsonData.data).to.have.property('status');",
											"    pm.environment.set('test_goal_id', jsonData.data.id);",
											"    console.log('Goal created:', jsonData.data.title);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"goal_type\": \"weekly\",\n    \"title\": \"Complete 10 listening exercises\",\n    \"description\": \"Practice listening skills for IELTS\",\n    \"target_value\": 10,\n    \"target_unit\": \"exercises\",\n    \"skill_type\": \"listening\",\n    \"end_date\": \"2025-10-17\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/user/goals",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "goals"]
								},
								"description": "Create a new study goal. goal_type: daily, weekly, monthly, custom"
							}
						},
						{
							"name": "Get All Goals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Goals retrieved', function() {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.data).to.have.property('goals');",
											"    pm.expect(jsonData.data).to.have.property('count');",
											"    console.log('Total goals:', jsonData.data.count);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/goals",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "goals"]
								},
								"description": "Get all user goals with enriched data (completion %, days remaining)"
							}
						},
						{
							"name": "Get Goal by ID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/goals/{{test_goal_id}}",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "goals", "{{test_goal_id}}"]
								}
							}
						},
						{
							"name": "Update Goal",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"current_value\": 5,\n    \"description\": \"Updated description\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/user/goals/{{test_goal_id}}",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "goals", "{{test_goal_id}}"]
								}
							}
						},
						{
							"name": "Complete Goal",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/goals/{{test_goal_id}}/complete",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "goals", "{{test_goal_id}}", "complete"]
								}
							}
						},
						{
							"name": "Delete Goal",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/goals/{{test_goal_id}}",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "goals", "{{test_goal_id}}"]
								}
							}
						}
					]
				},
				{
					"name": "Statistics & Achievements",
					"item": [
						{
							"name": "Get Detailed Statistics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/statistics/detailed",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "statistics", "detailed"]
								},
								"description": "Get comprehensive statistics with skill breakdown"
							}
						},
						{
							"name": "Get Skill Statistics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/statistics/listening",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "statistics", "listening"]
								},
								"description": "Get statistics for specific skill: listening, reading, writing, speaking"
							}
						},
						{
							"name": "Get All Achievements",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/achievements",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "achievements"]
								}
							}
						},
						{
							"name": "Get Earned Achievements",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/achievements/earned",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "achievements", "earned"]
								}
							}
						}
					]
				},
				{
					"name": "Study Reminders",
					"item": [
						{
							"name": "Create Reminder",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Morning Study Session\",\n    \"message\": \"Time to practice IELTS!\",\n    \"reminder_type\": \"daily\",\n    \"reminder_time\": \"09:00:00\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/user/reminders",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "reminders"]
								}
							}
						},
						{
							"name": "Get All Reminders",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/reminders",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "reminders"]
								}
							}
						},
						{
							"name": "Update Reminder",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reminder_time\": \"10:00:00\",\n    \"is_active\": true\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/user/reminders/:id",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "reminders", ":id"],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							}
						},
						{
							"name": "Delete Reminder",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/reminders/:id",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "reminders", ":id"],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							}
						},
						{
							"name": "Toggle Reminder",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/reminders/:id/toggle",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "reminders", ":id", "toggle"],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							}
						}
					]
				},
				{
					"name": "Leaderboard",
					"item": [
						{
							"name": "Get Top Learners",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/leaderboard?limit=10",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "leaderboard"],
									"query": [
										{
											"key": "limit",
											"value": "10",
											"description": "Number of top learners (default: 10)"
										}
									]
								},
								"description": "Get top learners ranked by achievements and study hours"
							}
						},
						{
							"name": "Get My Rank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Rank retrieved', function() {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.data).to.have.property('rank');",
											"    pm.expect(jsonData.data).to.have.property('total_points');",
											"    console.log('My rank:', jsonData.data.rank);",
											"    console.log('Total points:', jsonData.data.total_points);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/api/v1/user/leaderboard/rank",
									"protocol": "http",
									"host": ["localhost"],
									"port": "8082",
									"path": ["api", "v1", "user", "leaderboard", "rank"]
								},
								"description": "Get current user's rank on leaderboard"
							}
						}
					]
				}
			]
		},
	{
		"name": "Course Service",
		"item": [
			{
				"name": "Health Check",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test('Status code is 200', function() {",
								"    pm.response.to.have.status(200);",
								"});",
								"",
								"pm.test('Service is healthy', function() {",
								"    const jsonData = pm.response.json();",
								"    pm.expect(jsonData.success).to.be.true;",
								"    pm.expect(jsonData.data.service).to.eql('course-service');",
								"    pm.expect(jsonData.data.status).to.eql('healthy');",
								"});"
							]
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "{{course_service_url}}/health",
						"host": ["{{course_service_url}}"],
						"path": ["health"]
					},
					"description": "Check Course Service health status"
				}
			},
			{
				"name": "Public APIs",
				"item": [
					{
						"name": "Get All Courses",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has courses list', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('courses');",
										"    pm.expect(jsonData.data).to.have.property('count');",
										"    pm.expect(jsonData.data.courses).to.be.an('array');",
										"});",
										"",
										"// Save first course ID for other tests",
										"const jsonData = pm.response.json();",
										"if (jsonData.data.courses.length > 0) {",
										"    pm.environment.set('test_course_id', jsonData.data.courses[0].id);",
										"    console.log('Saved course ID:', jsonData.data.courses[0].id);",
										"}"
									]
								}
							}
						],
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/courses?page=1&limit=20",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "courses"],
								"query": [
									{
										"key": "page",
										"value": "1",
										"description": "Page number"
									},
									{
										"key": "limit",
										"value": "20",
										"description": "Items per page"
									},
									{
										"key": "skill_type",
										"value": "listening",
										"description": "Filter by skill: listening, reading, writing, speaking",
										"disabled": true
									},
									{
										"key": "level",
										"value": "intermediate",
										"description": "Filter by level: beginner, intermediate, advanced",
										"disabled": true
									},
									{
										"key": "enrollment_type",
										"value": "free",
										"description": "Filter by type: free, premium, subscription",
										"disabled": true
									},
									{
										"key": "is_featured",
										"value": "true",
										"description": "Show only featured courses",
										"disabled": true
									},
									{
										"key": "search",
										"value": "IELTS",
										"description": "Search in title and description",
										"disabled": true
									}
								]
							},
							"description": "Get list of published courses with filtering and pagination. No authentication required."
						}
					},
					{
						"name": "Get Course Detail",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has course detail', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('course');",
										"    pm.expect(jsonData.data).to.have.property('modules');",
										"    pm.expect(jsonData.data.modules).to.be.an('array');",
										"});",
										"",
										"// Save module and lesson IDs",
										"const jsonData = pm.response.json();",
										"if (jsonData.data.modules.length > 0) {",
										"    pm.environment.set('test_module_id', jsonData.data.modules[0].id);",
										"    if (jsonData.data.modules[0].lessons.length > 0) {",
										"        pm.environment.set('test_lesson_id', jsonData.data.modules[0].lessons[0].id);",
										"    }",
										"}"
									]
								}
							}
						],
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/courses/{{test_course_id}}",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "courses", "{{test_course_id}}"]
							},
							"description": "Get detailed information about a course including modules and lessons"
						}
					},
					{
						"name": "Get Lesson Detail",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has lesson detail', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('lesson');",
										"    pm.expect(jsonData.data).to.have.property('videos');",
										"    pm.expect(jsonData.data).to.have.property('materials');",
										"});"
									]
								}
							}
						],
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/lessons/{{test_lesson_id}}",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "lessons", "{{test_lesson_id}}"]
							},
							"description": "Get detailed information about a lesson including videos and materials"
						}
					}
				],
				"description": "Public APIs for browsing courses (no authentication required)"
			},
			{
				"name": "Student APIs",
				"item": [
					{
						"name": "Enroll in Course",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 201', function() {",
										"    pm.response.to.have.status(201);",
										"});",
										"",
										"pm.test('Enrollment created successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('id');",
										"    pm.expect(jsonData.data).to.have.property('course_id');",
										"    pm.expect(jsonData.data).to.have.property('user_id');",
										"    pm.expect(jsonData.data.status).to.eql('active');",
										"});",
										"",
										"// Save enrollment ID",
										"const jsonData = pm.response.json();",
										"pm.environment.set('test_enrollment_id', jsonData.data.id);"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"course_id\": \"{{test_course_id}}\",\n    \"enrollment_type\": \"free\"\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/enrollments",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "enrollments"]
							},
							"description": "Enroll in a course (requires authentication)"
						}
					},
					{
						"name": "Get My Enrollments",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has enrollments', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('enrollments');",
										"    pm.expect(jsonData.data.enrollments).to.be.an('array');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/enrollments/my",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "enrollments", "my"]
							},
							"description": "Get all enrollments for the authenticated user"
						}
					},
					{
						"name": "Get Enrollment Progress",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has progress detail', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('enrollment');",
										"    pm.expect(jsonData.data).to.have.property('course');",
										"    pm.expect(jsonData.data).to.have.property('modules_progress');",
										"    pm.expect(jsonData.data.modules_progress).to.be.an('array');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/enrollments/{{test_enrollment_id}}/progress",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "enrollments", "{{test_enrollment_id}}", "progress"]
							},
							"description": "Get detailed progress for an enrollment including per-module completion"
						}
					},
					{
						"name": "Update Lesson Progress",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Progress updated successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('progress_percentage');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "PUT",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"progress_percentage\": 50,\n    \"video_watched_seconds\": 600,\n    \"time_spent\": 900,\n    \"is_completed\": false\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/progress/lessons/{{test_lesson_id}}",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "progress", "lessons", "{{test_lesson_id}}"]
							},
							"description": "Update progress for a specific lesson"
						}
					}
				],
				"description": "APIs for students to enroll and track their progress (requires authentication)"
			},
			{
				"name": "Instructor APIs",
				"item": [
					{
						"name": "Create Course",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 201', function() {",
										"    pm.response.to.have.status(201);",
										"});",
										"",
										"pm.test('Course created successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('id');",
										"    pm.expect(jsonData.data).to.have.property('instructor_id');",
										"    pm.expect(jsonData.data.status).to.eql('draft');",
										"});",
										"",
										"// Save created course ID",
										"const jsonData = pm.response.json();",
										"pm.environment.set('instructor_course_id', jsonData.data.id);",
										"console.log('Created course ID:', jsonData.data.id);"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{instructor_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"title\": \"IELTS Speaking Mastery\",\n    \"slug\": \"ielts-speaking-mastery\",\n    \"description\": \"Master IELTS Speaking with comprehensive practice and expert feedback\",\n    \"short_description\": \"Complete guide to IELTS Speaking\",\n    \"skill_type\": \"speaking\",\n    \"level\": \"intermediate\",\n    \"target_band_score\": 7.0,\n    \"enrollment_type\": \"premium\",\n    \"price\": 999000,\n    \"currency\": \"VND\",\n    \"thumbnail_url\": \"https://example.com/thumbnail.jpg\",\n    \"preview_video_url\": \"https://example.com/preview.mp4\"\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/admin/courses",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "admin", "courses"]
							},
							"description": "Create a new course (Instructor or Admin only). Course starts in 'draft' status."
						}
					},
					{
						"name": "Update Course",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Course updated successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.message).to.include('updated');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{instructor_token}}",
										"type": "string"
									}
								]
							},
							"method": "PUT",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"title\": \"IELTS Speaking Mastery - Updated\",\n    \"is_featured\": true,\n    \"price\": 899000\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/admin/courses/{{instructor_course_id}}",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "admin", "courses", "{{instructor_course_id}}"]
							},
							"description": "Update course details. Instructors can only update their own courses. Partial updates supported."
						}
					},
					{
						"name": "Create Module",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 201', function() {",
										"    pm.response.to.have.status(201);",
										"});",
										"",
										"pm.test('Module created successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('id');",
										"    pm.expect(jsonData.data).to.have.property('course_id');",
										"});",
										"",
										"// Save module ID",
										"const jsonData = pm.response.json();",
										"pm.environment.set('instructor_module_id', jsonData.data.id);"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{instructor_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"course_id\": \"{{instructor_course_id}}\",\n    \"title\": \"Module 1: Introduction to IELTS Speaking\",\n    \"description\": \"Understanding the format and assessment criteria\",\n    \"duration_hours\": 3.0,\n    \"display_order\": 1\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/admin/modules",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "admin", "modules"]
							},
							"description": "Create a module for a course. Instructors can only create modules for their own courses."
						}
					},
					{
						"name": "Create Lesson",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 201', function() {",
										"    pm.response.to.have.status(201);",
										"});",
										"",
										"pm.test('Lesson created successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('id');",
										"    pm.expect(jsonData.data).to.have.property('module_id');",
										"    pm.expect(jsonData.data).to.have.property('course_id');",
										"});",
										"",
										"// Save lesson ID",
										"const jsonData = pm.response.json();",
										"pm.environment.set('instructor_lesson_id', jsonData.data.id);"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{instructor_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"module_id\": \"{{instructor_module_id}}\",\n    \"title\": \"Lesson 1: IELTS Speaking Overview\",\n    \"description\": \"Understanding the three parts of IELTS Speaking test\",\n    \"content_type\": \"video\",\n    \"duration_minutes\": 45,\n    \"display_order\": 1,\n    \"is_free\": true\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/admin/lessons",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "admin", "lessons"]
							},
							"description": "Create a lesson for a module. Instructors can only create lessons for their own courses."
						}
					},
					{
						"name": "Publish Course",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Course published successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.message).to.include('published');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{instructor_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/admin/courses/{{instructor_course_id}}/publish",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "admin", "courses", "{{instructor_course_id}}", "publish"]
							},
							"description": "Publish a draft course to make it visible to students. Instructors can only publish their own courses."
						}
					}
				],
				"description": "APIs for instructors to create and manage their own courses"
			},
			{
				"name": "Admin APIs",
				"item": [
					{
						"name": "Delete Course",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Course deleted successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.message).to.include('deleted');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_token}}",
										"type": "string"
									}
								]
							},
							"method": "DELETE",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/admin/courses/{{course_to_delete}}",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "admin", "courses", "{{course_to_delete}}"]
							},
							"description": "Soft delete a course (Admin only). This is a soft delete - course is marked as deleted but not removed from database."
						}
					},
					{
						"name": "Add YouTube Video to Lesson",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 201', function() {",
										"    pm.response.to.have.status(201);",
										"});",
										"",
										"pm.test('Video added successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.have.property('id');",
										"    pm.expect(jsonData.data).to.have.property('video_provider');",
										"    pm.expect(jsonData.data.video_provider).to.eql('youtube');",
										"    pm.expect(jsonData.data).to.have.property('video_id');",
										"    pm.expect(jsonData.data).to.have.property('video_url');",
										"    ",
										"    // Save video ID for future tests",
										"    pm.environment.set('youtube_video_id', jsonData.data.id);",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"title\": \"IELTS Listening Practice Test - Full Test with Answers\",\n  \"video_provider\": \"youtube\",\n  \"video_id\": \"jss3kHbOXvE\",\n  \"video_url\": \"https://www.youtube.com/watch?v=jss3kHbOXvE\",\n  \"duration_seconds\": 2100,\n  \"thumbnail_url\": \"https://img.youtube.com/vi/jss3kHbOXvE/maxresdefault.jpg\"\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/admin/lessons/{{test_lesson_id}}/videos",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "admin", "lessons", "{{test_lesson_id}}", "videos"]
							},
							"description": "Add a YouTube video to a lesson (Admin or Instructor only). Supports YouTube, Bunny.net, Vimeo, and self-hosted videos.\n\n**YouTube URL Formats**:\n- Watch: https://www.youtube.com/watch?v=VIDEO_ID\n- Short: https://youtu.be/VIDEO_ID\n- Embed: https://www.youtube.com/embed/VIDEO_ID\n\n**Thumbnail URL**:\n- Default: https://img.youtube.com/vi/{VIDEO_ID}/default.jpg\n- HQ: https://img.youtube.com/vi/{VIDEO_ID}/hqdefault.jpg\n- Max: https://img.youtube.com/vi/{VIDEO_ID}/maxresdefault.jpg\n\n**Authorization**: Admin can add to any lesson. Instructor can only add to their own courses."
						}
					},
					{
						"name": "Update Any Course",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Course updated by admin', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_token}}",
										"type": "string"
									}
								]
							},
							"method": "PUT",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"is_featured\": true,\n    \"is_recommended\": true\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/admin/courses/{{test_course_id}}",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "admin", "courses", "{{test_course_id}}"]
							},
							"description": "Admin can update ANY course regardless of ownership"
						}
					}
				],
				"description": "Admin-only APIs with full permissions"
			},
			{
				"name": "Reviews & Categories",
				"item": [
					{
						"name": "Get All Categories",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has categories', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.be.an('array');",
										"    ",
										"    if (jsonData.data.length > 0) {",
										"        pm.expect(jsonData.data[0]).to.have.property('id');",
										"        pm.expect(jsonData.data[0]).to.have.property('name');",
										"        pm.expect(jsonData.data[0]).to.have.property('slug');",
										"        console.log('Categories found:', jsonData.data.length);",
										"    }",
										"});"
									]
								}
							}
						],
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/categories",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "categories"]
							},
							"description": "Get all course categories (Listening, Reading, Writing, Speaking, Grammar, etc.)"
						}
					},
					{
						"name": "Get Course Categories",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has course categories', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.be.an('array');",
										"});"
									]
								}
							}
						],
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/courses/{{test_course_id}}/categories",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "courses", "{{test_course_id}}", "categories"]
							},
							"description": "Get categories assigned to a specific course"
						}
					},
					{
						"name": "Get Course Reviews",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has reviews', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.be.an('array');",
										"});"
									]
								}
							}
						],
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/courses/{{test_course_id}}/reviews",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "courses", "{{test_course_id}}", "reviews"]
							},
							"description": "Get approved reviews for a course (public - no auth required)"
						}
					},
					{
						"name": "Create Course Review",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 201', function() {",
										"    pm.response.to.have.status(201);",
										"});",
										"",
										"pm.test('Review created successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.message).to.include('approval');",
										"    ",
										"    if (jsonData.data) {",
										"        pm.expect(jsonData.data).to.have.property('id');",
										"        pm.expect(jsonData.data).to.have.property('rating');",
										"        pm.expect(jsonData.data.is_approved).to.be.false;",
										"    }",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"rating\": 5,\n    \"title\": \"Excellent course!\",\n    \"comment\": \"This course helped me improve my IELTS skills significantly. The content is well-structured and easy to follow.\"\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/courses/{{test_course_id}}/reviews",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "courses", "{{test_course_id}}", "reviews"]
							},
							"description": "Create a review for a course. Must be enrolled in the course. Review requires admin approval before appearing publicly."
						}
					}
				],
				"description": "Course reviews and category management"
			},
			{
				"name": "Video Tracking",
				"item": [
					{
						"name": "Track Video Progress",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Progress tracked successfully', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.message).to.include('tracked');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"body": {
								"mode": "raw",
								"raw": "{\n    \"video_id\": \"{{test_video_id}}\",\n    \"lesson_id\": \"{{test_lesson_id}}\",\n    \"watched_seconds\": 120,\n    \"total_seconds\": 300,\n    \"device_type\": \"web\"\n}"
							},
							"url": {
								"raw": "{{course_service_url}}/api/v1/videos/track",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "videos", "track"]
							},
							"description": "Track video watching progress for analytics and resume playback"
						}
					},
					{
						"name": "Get Video Watch History",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has watch history', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.be.an('array');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/videos/history?limit=20",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "videos", "history"],
								"query": [
									{
										"key": "limit",
										"value": "20",
										"description": "Number of records to return (default: 20)"
									}
								]
							},
							"description": "Get user's video watch history"
						}
					},
					{
						"name": "Get Video Subtitles",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Response has subtitles', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.data).to.be.an('array');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/videos/{{test_video_id}}/subtitles",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "videos", "{{test_video_id}}", "subtitles"]
							},
							"description": "Get available subtitles for a video (VTT/SRT format)"
						}
					}
				],
				"description": "Video watching progress and subtitle management"
			},
			{
				"name": "Materials",
				"item": [
					{
						"name": "Download Material",
						"event": [
							{
								"listen": "test",
								"script": {
									"exec": [
										"pm.test('Status code is 200', function() {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"pm.test('Download recorded', function() {",
										"    const jsonData = pm.response.json();",
										"    pm.expect(jsonData.success).to.be.true;",
										"    pm.expect(jsonData.message).to.include('recorded');",
										"});"
									]
								}
							}
						],
						"request": {
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"method": "POST",
							"header": [],
							"url": {
								"raw": "{{course_service_url}}/api/v1/materials/{{test_material_id}}/download",
								"host": ["{{course_service_url}}"],
								"path": ["api", "v1", "materials", "{{test_material_id}}", "download"]
							},
							"description": "Record material download (increments download counter). Actual file download happens on frontend."
						}
					}
				],
				"description": "Lesson material download tracking"
			}
		],
		"description": "Course Service APIs for managing courses, modules, lessons, and student enrollments"
	},
	{
		"name": "Exercise Service",
		"item": [
			{
				"name": "Health Check",
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "{{exercise_service_url}}/health",
						"host": ["{{exercise_service_url}}"],
						"path": ["health"]
					},
					"description": "Check Exercise Service health status"
				}
			},
			{
				"name": "Public APIs",
				"item": [
					{
						"name": "List Exercises",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"pm.test('Status 200', function() { pm.response.to.have.status(200); });",
										"pm.test('Success true', function() { pm.expect(pm.response.json().success).to.be.true; });",
										"pm.test('Has exercises array', function() { pm.expect(pm.response.json().data.exercises).to.be.an('array'); });",
										"",
										"const exercises = pm.response.json().data.exercises;",
										"if (exercises.length > 0) {",
										"    pm.environment.set('test_exercise_id', exercises[0].id);",
										"    console.log('Saved exercise ID:', exercises[0].id);",
										"}"
									]
								}
							}
						],
						"request": {
							"auth": { "type": "noauth" },
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/exercises?page=1&limit=10&skill_type=listening&difficulty=easy",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "exercises"],
								"query": [
									{ "key": "page", "value": "1" },
									{ "key": "limit", "value": "10" },
									{ "key": "skill_type", "value": "listening", "description": "listening or reading" },
									{ "key": "difficulty", "value": "easy", "description": "easy, medium, hard" },
									{ "key": "exercise_type", "value": "practice", "disabled": true, "description": "practice, mock_test, full_test" },
									{ "key": "is_free", "value": "true", "disabled": true },
									{ "key": "search", "value": "", "disabled": true }
								]
							},
							"description": "Browse exercises with filters (no auth required)"
						}
					},
					{
						"name": "Get Exercise Detail",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"pm.test('Status 200', function() { pm.response.to.have.status(200); });",
										"pm.test('Has sections', function() { pm.expect(pm.response.json().data.sections).to.be.an('array'); });"
									]
								}
							}
						],
						"request": {
							"auth": { "type": "noauth" },
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/exercises/{{test_exercise_id}}",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "exercises", "{{test_exercise_id}}"]
							},
							"description": "Get exercise with sections and questions"
						}
					}
				]
			},
			{
				"name": "Student APIs",
				"item": [
					{
						"name": "Start Exercise",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"if (pm.response.code === 201) {",
										"    const submission = pm.response.json().data;",
										"    pm.environment.set('test_submission_id', submission.id);",
										"    console.log('Saved submission ID:', submission.id);",
										"}"
									]
								}
							}
						],
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"exercise_id\": \"{{test_exercise_id}}\",\n  \"device_type\": \"web\"\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/submissions",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "submissions"]
							},
							"description": "Start a new exercise attempt. Creates user_exercise_attempts record with auto-incremented attempt_number."
						}
					},
					{
						"name": "Submit Answers",
						"request": {
							"method": "PUT",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"answers\": [\n    {\n      \"question_id\": \"question-uuid-1\",\n      \"selected_option_id\": \"option-uuid-a\",\n      \"time_spent_seconds\": 45\n    },\n    {\n      \"question_id\": \"question-uuid-2\",\n      \"text_answer\": \"answer text\",\n      \"time_spent_seconds\": 30\n    }\n  ]\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/submissions/{{test_submission_id}}/answers",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "submissions", "{{test_submission_id}}", "answers"]
							},
							"description": "Submit answers for an attempt. Auto-grades answers (multiple choice checks is_correct flag, fill-in-blank uses case-insensitive comparison with answer_variations). Calculates band_score (0-9 IELTS scale) and marks attempt as completed."
						}
					},
					{
						"name": "Get Submission Result",
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/submissions/{{test_submission_id}}/result",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "submissions", "{{test_submission_id}}", "result"]
							},
							"description": "Get detailed results for an attempt including: submission data (attempt_number, band_score, status), exercise info, all answers with questions, correct answers, and performance stats (accuracy, band_score, time spent)."
						}
					},
					{
						"name": "My Submissions",
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/submissions/my?page=1&limit=10",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "submissions", "my"],
								"query": [
									{ "key": "page", "value": "1" },
									{ "key": "limit", "value": "10" }
								]
							},
							"description": "Get user's attempt history with pagination. Shows all attempts with attempt_number, band_score, status, and exercise details."
						}
					}
				]
			},
			{
				"name": "Admin APIs",
				"item": [
					{
						"name": "Create Exercise",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"if (pm.response.code === 201) {",
										"    const exercise = pm.response.json().data;",
										"    pm.environment.set('test_exercise_id', exercise.id);",
										"    console.log('Created exercise:', exercise.id);",
										"}"
									]
								}
							}
						],
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"title\": \"IELTS Listening Practice Test 1\",\n  \"slug\": \"ielts-listening-practice-test-1\",\n  \"description\": \"Complete IELTS Listening practice test with 40 questions\",\n  \"exercise_type\": \"practice\",\n  \"skill_type\": \"listening\",\n  \"difficulty\": \"medium\",\n  \"ielts_level\": \"6.0-7.0\",\n  \"time_limit_minutes\": 40,\n  \"audio_url\": \"https://example.com/audio/listening-test-1.mp3\",\n  \"audio_duration_seconds\": 2400,\n  \"passing_score\": 60,\n  \"is_free\": true\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises"]
							},
							"description": "Create new exercise (instructor/admin only)"
						}
					},
					{
						"name": "Update Exercise",
						"request": {
							"method": "PUT",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"title\": \"Updated Exercise Title\",\n  \"difficulty\": \"hard\",\n  \"is_published\": true\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises/{{test_exercise_id}}",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises", "{{test_exercise_id}}"]
							},
							"description": "Update exercise details"
						}
					},
					{
						"name": "Create Section",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"if (pm.response.code === 201) {",
										"    const section = pm.response.json().data;",
										"    pm.environment.set('test_section_id', section.id);",
										"    console.log('Created section:', section.id);",
										"}"
									]
								}
							}
						],
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"title\": \"Section 1 - Social Conversation\",\n  \"description\": \"A conversation between two people in an everyday social context\",\n  \"section_number\": 1,\n  \"audio_url\": \"https://example.com/audio/section1.mp3\",\n  \"audio_start_time\": 0,\n  \"audio_end_time\": 600,\n  \"instructions\": \"Listen and answer questions 1-10\",\n  \"display_order\": 0\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises/{{test_exercise_id}}/sections",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises", "{{test_exercise_id}}", "sections"]
							},
							"description": "Create section within an exercise"
						}
					},
					{
						"name": "Create Question",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"if (pm.response.code === 201) {",
										"    const question = pm.response.json().data;",
										"    pm.environment.set('test_question_id', question.id);",
										"    console.log('Created question:', question.id);",
										"}"
									]
								}
							}
						],
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"exercise_id\": \"{{test_exercise_id}}\",\n  \"section_id\": \"{{test_section_id}}\",\n  \"question_number\": 1,\n  \"question_text\": \"What type of car does the woman want to rent?\",\n  \"question_type\": \"multiple_choice\",\n  \"points\": 1.0,\n  \"explanation\": \"The woman mentions she needs a small car for city driving.\",\n  \"display_order\": 0\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/questions",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "questions"]
							},
							"description": "Create question (multiple_choice, fill_in_blank, matching, etc.)"
						}
					},
					{
						"name": "Create Question Option",
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"option_label\": \"A\",\n  \"option_text\": \"A small city car\",\n  \"is_correct\": true,\n  \"display_order\": 0\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/questions/{{test_question_id}}/options",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "questions", "{{test_question_id}}", "options"]
							},
							"description": "Add option to multiple choice question. Set is_correct=true for correct answer."
						}
					},
					{
						"name": "Create Question Answer",
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"answer_text\": \"Monday\",\n  \"alternative_answers\": [\"monday\", \"Mon\"]\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/questions/{{test_question_id}}/answer",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "questions", "{{test_question_id}}", "answer"]
							},
							"description": "Create answer for fill-in-blank or short answer questions. Supports alternative_answers for variations (stored in answer_variations array)."
						}
					},
					{
						"name": "Delete Exercise",
						"request": {
							"method": "DELETE",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises/{{test_exercise_id}}",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises", "{{test_exercise_id}}"]
							},
							"description": "Soft delete exercise (sets is_published=false)"
						}
					},
					{
						"name": "Publish Exercise",
						"request": {
							"method": "POST",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises/{{test_exercise_id}}/publish",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises", "{{test_exercise_id}}", "publish"]
							},
							"description": "Publish a draft exercise (sets is_published=true, published_at=now)"
						}
					},
					{
						"name": "Unpublish Exercise",
						"request": {
							"method": "POST",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises/{{test_exercise_id}}/unpublish",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises", "{{test_exercise_id}}", "unpublish"]
							},
							"description": "Unpublish an exercise (sets is_published=false)"
						}
					},
					{
						"name": "Get Exercise Analytics",
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises/{{test_exercise_id}}/analytics",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises", "{{test_exercise_id}}", "analytics"]
							},
							"description": "Get performance analytics: attempts, scores (avg/median/highest/lowest), completion time, difficulty, question statistics"
						}
					},
					{
						"name": "Create Tag",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"if (pm.response.code === 201) {",
										"    const tag = pm.response.json().data;",
										"    pm.environment.set('test_tag_id', tag.id);",
										"    console.log('Created tag:', tag.id);",
										"}"
									]
								}
							}
						],
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"name\": \"Cambridge IELTS 16\",\n  \"slug\": \"cambridge-ielts-16\"\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/tags",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "tags"]
							},
							"description": "Create a new tag for categorizing exercises"
						}
					},
					{
						"name": "Add Tag to Exercise",
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"tag_id\": {{test_tag_id}}\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises/{{test_exercise_id}}/tags",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises", "{{test_exercise_id}}", "tags"]
							},
							"description": "Attach a tag to an exercise"
						}
					},
					{
						"name": "Remove Tag from Exercise",
						"request": {
							"method": "DELETE",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/exercises/{{test_exercise_id}}/tags/{{test_tag_id}}",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "exercises", "{{test_exercise_id}}", "tags", "{{test_tag_id}}"]
							},
							"description": "Remove a tag from an exercise"
						}
					},
					{
						"name": "Get Bank Questions",
						"request": {
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/question-bank?page=1&limit=20&skill_type=reading&question_type=multiple_choice",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "question-bank"],
								"query": [
									{ "key": "page", "value": "1" },
									{ "key": "limit", "value": "20" },
									{ "key": "skill_type", "value": "reading", "description": "listening or reading" },
									{ "key": "question_type", "value": "multiple_choice", "description": "multiple_choice, fill_in_blank, etc." }
								]
							},
							"description": "Browse reusable questions in question bank"
						}
					},
					{
						"name": "Create Bank Question",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"if (pm.response.code === 201) {",
										"    const question = pm.response.json().data;",
										"    pm.environment.set('test_bank_question_id', question.id);",
										"    console.log('Created bank question:', question.id);",
										"}"
									]
								}
							}
						],
						"request": {
							"method": "POST",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"title\": \"Academic Discussion - Technology\",\n  \"skill_type\": \"reading\",\n  \"question_type\": \"multiple_choice\",\n  \"difficulty\": \"medium\",\n  \"topic\": \"Technology\",\n  \"question_text\": \"What is the main idea of paragraph 3?\",\n  \"answer_data\": {\n    \"options\": [\n      {\"label\": \"A\", \"text\": \"Technology improves education\", \"is_correct\": true},\n      {\"label\": \"B\", \"text\": \"Technology is expensive\", \"is_correct\": false},\n      {\"label\": \"C\", \"text\": \"Technology is harmful\", \"is_correct\": false},\n      {\"label\": \"D\", \"text\": \"Technology is optional\", \"is_correct\": false}\n    ]\n  },\n  \"tags\": [\"academic\", \"technology\", \"reading\"]\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/question-bank",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "question-bank"]
							},
							"description": "Create a reusable question in the question bank. answer_data is flexible JSONB field."
						}
					},
					{
						"name": "Update Bank Question",
						"request": {
							"method": "PUT",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"body": {
								"mode": "raw",
								"raw": "{\n  \"title\": \"Academic Discussion - Technology (Updated)\",\n  \"skill_type\": \"reading\",\n  \"question_text\": \"What is the main idea of paragraph 3? (Updated)\",\n  \"question_type\": \"multiple_choice\",\n  \"answer_data\": {\n    \"options\": [\n      {\"label\": \"A\", \"text\": \"Technology significantly improves education\", \"is_correct\": true},\n      {\"label\": \"B\", \"text\": \"Technology is expensive\", \"is_correct\": false},\n      {\"label\": \"C\", \"text\": \"Technology is harmful\", \"is_correct\": false},\n      {\"label\": \"D\", \"text\": \"Technology is optional\", \"is_correct\": false}\n    ]\n  },\n  \"tags\": [\"academic\", \"technology\", \"reading\", \"updated\"]\n}"
							},
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/question-bank/{{test_bank_question_id}}",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "question-bank", "{{test_bank_question_id}}"]
							},
							"description": "Update a question in the question bank"
						}
					},
					{
						"name": "Delete Bank Question",
						"request": {
							"method": "DELETE",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/admin/question-bank/{{test_bank_question_id}}",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "admin", "question-bank", "{{test_bank_question_id}}"]
							},
							"description": "Delete a question from the question bank"
						}
					}
				]
			},
			{
				"name": "Tags (Public)",
				"item": [
					{
						"name": "Get All Tags",
						"request": {
							"auth": { "type": "noauth" },
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/tags",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "tags"]
							},
							"description": "Get all available tags (public access)"
						}
					},
					{
						"name": "Get Exercise Tags",
						"request": {
							"auth": { "type": "noauth" },
							"method": "GET",
							"header": [],
							"url": {
								"raw": "{{exercise_service_url}}/api/v1/exercises/{{test_exercise_id}}/tags",
								"host": ["{{exercise_service_url}}"],
								"path": ["api", "v1", "exercises", "{{test_exercise_id}}", "tags"]
							},
							"description": "Get tags for a specific exercise (public access)"
						}
					}
				]
			}
		],
		"description": "Exercise Service APIs for exercises, questions, submissions, auto-grading, tags, question bank, and analytics"
	},
	{
		"name": "Notification Service",
		"item": [
			{
				"name": "Student - Get Preferences",
				"request": {
					"method": "GET",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						}
					],
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications/preferences",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications", "preferences"]
					}
				},
				"response": []
			},
			{
				"name": "Student - Update Preferences",
				"request": {
					"method": "PUT",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						},
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"push_reminders\": false,\n  \"quiet_hours_enabled\": true,\n  \"quiet_hours_start\": \"22:00:00\",\n  \"quiet_hours_end\": \"08:00:00\",\n  \"max_notifications_per_day\": 20\n}"
					},
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications/preferences",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications", "preferences"]
					}
				},
				"response": []
			},
			{
				"name": "Student - List Notifications",
				"request": {
					"method": "GET",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						}
					],
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications?page=1&limit=10&is_read=false",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications"],
						"query": [
							{"key": "page", "value": "1"},
							{"key": "limit", "value": "10"},
							{"key": "is_read", "value": "false", "description": "Optional filter"}
						]
					}
				},
				"response": []
			},
			{
				"name": "Student - Get Unread Count",
				"request": {
					"method": "GET",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						}
					],
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications/unread-count",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications", "unread-count"]
					}
				},
				"response": []
			},
			{
				"name": "Student - Get Notification by ID",
				"request": {
					"method": "GET",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						}
					],
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications/{{notification_id}}",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications", "{{notification_id}}"]
					}
				},
				"response": []
			},
			{
				"name": "Student - Mark as Read",
				"request": {
					"method": "PUT",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						}
					],
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications/{{notification_id}}/read",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications", "{{notification_id}}", "read"]
					}
				},
				"response": []
			},
			{
				"name": "Student - Mark All as Read",
				"request": {
					"method": "PUT",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						}
					],
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications/mark-all-read",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications", "mark-all-read"]
					}
				},
				"response": []
			},
			{
				"name": "Student - Delete Notification",
				"request": {
					"method": "DELETE",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						}
					],
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications/{{notification_id}}",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications", "{{notification_id}}"]
					}
				},
				"response": []
			},
			{
				"name": "Student - Register Device",
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						},
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"device_token\": \"fcm_token_123456789\",\n  \"device_type\": \"android\",\n  \"device_name\": \"Samsung Galaxy S21\",\n  \"app_version\": \"1.0.0\",\n  \"os_version\": \"Android 12\"\n}"
					},
					"url": {
						"raw": "{{notification_service_url}}/api/v1/notifications/devices",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "notifications", "devices"]
					}
				},
				"response": []
			},
			{
				"name": "Admin - Create Notification",
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						},
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"type\": \"achievement\",\n  \"category\": \"success\",\n  \"title\": \"Congratulations!\",\n  \"message\": \"You have completed your first lesson\",\n  \"action_type\": \"navigate_to_course\",\n  \"action_data\": {\n    \"course_id\": \"123\",\n    \"lesson_id\": \"456\"\n  }\n}"
					},
					"url": {
						"raw": "{{notification_service_url}}/api/v1/admin/notifications",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "admin", "notifications"]
					}
				},
				"response": []
			},
			{
				"name": "Admin - Send Bulk Notifications",
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Authorization",
							"value": "Bearer {{access_token}}",
							"type": "text"
						},
						{
							"key": "Content-Type",
							"value": "application/json",
							"type": "text"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n  \"user_ids\": [\"{{user_id}}\"],\n  \"type\": \"reminder\",\n  \"category\": \"info\",\n  \"title\": \"Daily Practice Reminder\",\n  \"message\": \"Don't forget to practice your English today!\"\n}"
					},
					"url": {
						"raw": "{{notification_service_url}}/api/v1/admin/notifications/bulk",
						"host": ["{{notification_service_url}}"],
						"path": ["api", "v1", "admin", "notifications", "bulk"]
					}
				},
				"response": []
			}
		],
		"description": "Notification Service APIs for managing user notifications, preferences, and device tokens"
	}
	]
}